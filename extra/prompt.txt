# GOAT SDK Python - Hyperliquid Plugin Fix

## Current State
- Working on Hyperliquid plugin implementation
- Need to fix JSON request handling in service layer
- Production deployment needed within hours
- Using Poetry for dependency management

## Critical Issue
1. JSON Request Error:
   ```
   TypeError: HyperliquidService._request() got an unexpected keyword argument 'json'
   ```
   - Location: `goat_sdk/plugins/hyperliquid/service.py`
   - All methods using `json=` parameter but `_request` doesn't accept it
   - Need to fix request handling while maintaining functionality

## Testing Requirements
1. Run tests after EACH change:
   ```bash
   poetry run pytest tests/plugins/hyperliquid/test_market_data.py -v
   poetry run pytest tests/plugins/hyperliquid/test_agent.py -v
   PYTHONPATH=. poetry run python examples/hyperliquid/test_hyperliquid.py
   ```

2. Test Environment:
   ```
   API_KEY=your_api_key
   API_SECRET=your_api_secret
   MAINNET=false  # Using testnet for development
   ETH_WALLET_ADDRESS=0xEfDaFA4Cc07BbF8421477db4E3Ce79C96Baf5465
   ```

## Development Process
1. Make ONE change at a time
2. Run ALL tests after each change
3. Document any failures
4. Fix one issue before moving to next
5. Keep existing functionality intact

## Key Files
1. `goat_sdk/plugins/hyperliquid/service.py`
   - Main service implementation
   - Contains `_request` method needing fix

2. `goat_sdk/plugins/hyperliquid/plugin.py`
   - Plugin interface
   - Uses service for API calls

3. `tests/plugins/hyperliquid/test_market_data.py`
   - Market data tests
   - First set of tests to fix

4. `examples/hyperliquid/test_hyperliquid.py`
   - Integration tests
   - Tests real API interactions

## Code Quality Rules
1. Maintain type hints
2. Keep docstrings updated
3. Follow PEP 8
4. Preserve error handling
5. Keep logging consistent

## Testing Strategy
1. Fix request method
2. Run unit tests
3. Fix any validation errors
4. Run integration tests
5. Document all changes

## Notes
- DO NOT change more than one thing at a time
- Run tests after EVERY change
- Document all test results
- Keep changes minimal and focused
