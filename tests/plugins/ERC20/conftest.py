"""
          _____                    _____                    _____                    _____           _______                   _____          
         /\    \                  /\    \                  /\    \                  /\    \         /::\    \                 /\    \         
        /::\    \                /::\    \                /::\    \                /::\____\       /::::\    \               /::\____\        
       /::::\    \               \:::\    \              /::::\    \              /:::/    /      /::::::\    \             /:::/    /        
      /::::::\    \               \:::\    \            /::::::\    \            /:::/    /      /::::::::\    \           /:::/   _/___      
     /:::/\:::\    \               \:::\    \          /:::/\:::\    \          /:::/    /      /:::/~~\:::\    \         /:::/   /\    \     
    /:::/__\:::\    \               \:::\    \        /:::/__\:::\    \        /:::/    /      /:::/    \:::\    \       /:::/   /::\____\    
   /::::\   \:::\    \              /::::\    \      /::::\   \:::\    \      /:::/    /      /:::/    / \:::\    \     /:::/   /:::/    /    
  /::::::\   \:::\    \    ____    /::::::\    \    /::::::\   \:::\    \    /:::/    /      /:::/____/   \:::\____\   /:::/   /:::/   _/___  
 /:::/\:::\   \:::\    \  /\   \  /:::/\:::\    \  /:::/\:::\   \:::\    \  /:::/    /      |:::|    |     |:::|    | /:::/___/:::/   /\    \ 
/:::/  \:::\   \:::\____\/::\   \/:::/  \:::\____\/:::/  \:::\   \:::\____\/:::/____/       |:::|____|     |:::|    ||:::|   /:::/   /::\____\
\::/    \:::\  /:::/    /\:::\  /:::/    \::/    /\::/    \:::\   \::/    /\:::\    \        \:::\    \   /:::/    / |:::|__/:::/   /:::/    /
 \/____/ \:::\/:::/    /  \:::\/:::/    / \/____/  \/____/ \:::\   \/____/  \:::\    \        \:::\    \ /:::/    /   \:::\/:::/   /:::/    / 
          \::::::/    /    \::::::/    /                    \:::\    \       \:::\    \        \:::\    /:::/    /     \::::::/   /:::/    /  
           \::::/    /      \::::/____/                      \:::\____\       \:::\    \        \:::\__/:::/    /       \::::/___/:::/    /   
           /:::/    /        \:::\    \                       \::/    /        \:::\    \        \::::::::/    /         \:::\__/:::/    /    
          /:::/    /          \:::\    \                       \/____/          \:::\    \        \::::::/    /           \::::::::/    /     
         /:::/    /            \:::\    \                                        \:::\    \        \::::/    /             \::::::/    /      
        /:::/    /              \:::\____\                                        \:::\____\        \::/____/               \::::/    /       
        \::/    /                \::/    /                                         \::/    /         ~~                      \::/____/        
         \/____/                  \/____/                                           \/____/                                   ~~              
                                                                                                                                              

         
 
     GOAT-SDK Python - Unofficial SDK for GOAT - Igor Lessio - AIFlow.ml
     
     Path: examples/adapters/langchain_example.py
"""



"""Test fixtures for ERC20 plugin tests."""

import pytest
from web3 import Web3
from eth_account import Account
from eth_account.signers.local import LocalAccount

# Test accounts with test ETH
TEST_ACCOUNTS = [
    {
        "private_key": "0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d",
        "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"
    },
    {
        "private_key": "0x6cbed15c793ce57650b9877cf6fa156fbef513c4e6134f022a85b1ffdd59b2a1",
        "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0"
    },
]

# Test ERC20 token contract bytecode and ABI
TEST_TOKEN_BYTECODE = "0x608060405234801561001057600080fd5b506040518060400160405280600981526020017f546573742045524300000000000000000000000000000000000000000000000081525060009080519060200190610059929190610108565b506040518060400160405280600481526020017f5445535400000000000000000000000000000000000000000000000000000000815250600190805190602001906100a5929190610108565b506012600260006101000a81548160ff021916908360ff1602179055506127106003556000600460006101000a81548160ff0219169083151502179055506101a0565b8280546100c490610140565b90600052602060002090601f0160209004810192826100e65760008555610108565b82601f106100ff57805160ff1916838001178555610108565b82800160010185558215610108579182015b82811115610107578251825591602001919060010190610111565b5b5090506101159190610119565b5090565b5b8082111561013257600081600090555060010161011a565b5090565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806101585790505b6020821081036101715761017061014c565b5b50919050565b610a0d806101af6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146101295780635c658165146101475780636f9fb98a14610177578063a9059cbb14610195578063dd62ed3e146101c557610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610205565b6040516100ad9190610791565b60405180910390f35b6100d060048036038101906100cb91906106a4565b610293565b6040516100dd91906107f6565b60405180910390f35b6100ee610385565b6040516100fb91906107f6565b60405180910390f35b61011e60048036038101906101199190610655565b61038b565b60405161012b91906107f6565b60405180910390f35b610131610544565b60405161013e91906107f6565b60405180910390f35b610161600480360381019061015c91906106a4565b610557565b60405161016e91906107f6565b60405180910390f35b61017f61056f565b60405161018c91906107f6565b60405180910390f35b6101af60048036038101906101aa91906106a4565b610577565b6040516101bc91906107f6565b60405180910390f35b6101ef60048036038101906101ea91906106a4565b61066b565b6040516101fc91906107f6565b60405180910390f35b60606000805461021490610922565b80601f016020809104026020016040519081016040528092919081815260200182805461024090610922565b801561028d5780601f106102625761010080835404028352916020019161028d565b820191906000526020600020905b81548152906001019060200180831161027057829003601f168201915b5050505050905090565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103739190610811565b60405180910390a36001905092915050565b60035481565b600081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104199190610874565b92505081905550816003600082825461043291906108ca565b92505081905550816002600086815260200190815260200160002060008282546104599190610874565b92505081905550816002600085815260200190815260200160002060008282546104829190610874565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105069190610811565b60405180910390a36001905093925050565b600460009054906101000a900460ff1681565b60056020528160005260406000206020528060005260406000206000915091505481565b600047905090565b600081600360008282546105899190610874565b92505081905550816002600033815260200190815260200160002060008282546105b291906108ca565b92505081905550816002600085815260200190815260200160002060008282546105d99190610874565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161063d9190610811565b60405180910390a36001905092915050565b60026020528060005260406000206000915090505481565b6000602052816000526040600020602052806000526040600020600091509150505481565b60008135905061069e816109c0565b92915050565b6000813590506106b3816109d7565b92915050565b6000602082840312156106cb57600080fd5b60006106d98482850161068f565b91505092915050565b6000806000606084860312156106f757600080fd5b60006107058682870161068f565b93505060206107168682870161068f565b92505060406107278682870161068f565b9150509250925092565b60006020828403121561074357600080fd5b6000610751848285016106a4565b91505092915050565b61076381610902565b82525050565b6000610774826108e6565b61077e81856108f1565b935061078e8185602086016108ef565b610797816109af565b840191505092915050565b600060208201905081810360008301526107bc8184610769565b905092915050565b60006020820190506107d9600083018461075a565b92915050565b60006040820190506107f4600083018461075a565b92915050565b600060208201905061080f600083018461075a565b92915050565b6000602082019050610829600083018461075a565b92915050565b6000602082019050610844600083018461075a565b92915050565b6000602082019050610860600083018461075a565b92915050565b6000602082019050610879600083018461075a565b92915050565b600061088f826108e6565b915061089a836108e6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108cf576108ce610980565b5b828201905092915050565b60006108d5826108e6565b91506108e0836108e6565b925082821015610893576108926109af565b5b828203905092915050565b6000819050919050565b600082825260208201905092915050565b60005b8381101561090d5780820151818401526020810190506108f2565b8381111561091c576000848401525b50505050565b6000600282049050600182168061093a57607f821691505b6020821081141561094e5761094d610951565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b6109c981610902565b81146109d457600080fd5b50565b6109e081610902565b81146109eb57600080fd5b5056fea264697066735822122033c1b5b1ce5b0b1000acb77b84f2c7a8c9c8639e9a5f2b3c05a8f9f0e0f7a0164736f6c63430008000033"

TEST_TOKEN_ABI = [
    {
        "inputs": [
            {"name": "initialSupply", "type": "uint256"}
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [
            {"name": "owner", "type": "address"},
            {"name": "spender", "type": "address"}
        ],
        "name": "allowance",
        "outputs": [{"name": "", "type": "uint256"}],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {"name": "spender", "type": "address"},
            {"name": "amount", "type": "uint256"}
        ],
        "name": "approve",
        "outputs": [{"name": "", "type": "bool"}],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [{"name": "account", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"name": "", "type": "uint256"}],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "decimals",
        "outputs": [{"name": "", "type": "uint8"}],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "name",
        "outputs": [{"name": "", "type": "string"}],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "symbol",
        "outputs": [{"name": "", "type": "string"}],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {"name": "recipient", "type": "address"},
            {"name": "amount", "type": "uint256"}
        ],
        "name": "transfer",
        "outputs": [{"name": "", "type": "bool"}],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {"name": "sender", "type": "address"},
            {"name": "recipient", "type": "address"},
            {"name": "amount", "type": "uint256"}
        ],
        "name": "transferFrom",
        "outputs": [{"name": "", "type": "bool"}],
        "stateMutability": "nonpayable",
        "type": "function"
    }
]


@pytest.fixture(scope="session")
def web3():
    """Create a Web3 instance connected to Ganache."""
    return Web3(Web3.HTTPProvider("http://localhost:8545"))


@pytest.fixture(scope="session")
def accounts(web3) -> list[LocalAccount]:
    """Get test accounts."""
    return [Account.from_key(acc["private_key"]) for acc in TEST_ACCOUNTS]


@pytest.fixture(scope="session")
async def token_contract(web3, accounts):
    """Deploy a test ERC20 token contract."""
    contract = web3.eth.contract(abi=TEST_TOKEN_ABI, bytecode=TEST_TOKEN_BYTECODE)
    
    # Deploy contract
    tx_hash = contract.constructor(1000000).transact({"from": accounts[0].address})
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    
    # Get contract instance
    contract_instance = web3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=TEST_TOKEN_ABI
    )
    
    return contract_instance
